[project]
name = "opsml"
version = "3.0.0"
description = "Add your description here"
readme = "README.md"
requires-python = '>=3.9, <=3.13'
dependencies = [
    "fsspec>=2023.1.0, <=2024.2.0",
    "joblib~=1.3",
    "httpx>=0.23.3, <1.0.0",
    "opsml-cli~=0.5.0",
    "pandas>=1.5.3, <3",
    "polars~=1.0.0",
    "psutil~=5.9.0",
    "pyarrow>=15.0.0, <17.0.0",
    "pydantic~=2.0",
    "pydantic_settings~=2.0",
    "pyyaml~=6.0.1",
    "rich~=13.3.5",
    "rusty-logger~=0.3.0",
    "semver~=2.13.0",
    "tenacity~=8.2.2",
    "zarr~=2.12.0",
    "bcrypt~=4.2",
    "PyJWT~=2.8",
    "nvidia-ml-py>=12.560.30",
    "pipdeptree>=2.23.1",
    "scouter-ml>=0.3.2",
]

[project.scripts]
opsml-uvicorn-server = 'opsml.cli.launch_server:cli'

[project.optional-dependencies]
server = [
    "alembic~=1.10.3",
    "fastapi~=0.109",
    "gunicorn~=20.1",
    "jinja2~=3.1",
    "prometheus-fastapi-instrumentator~=6.0",
    "python-multipart~=0.0.7",
    "rollbar~=0.16.3",
    "uvicorn~=0.24",
    "streaming-form-data>=1.11.0, <1.16.0",
    "sqlalchemy[mypy]~=2.0"
]
aws_mysql = [
    "s3fs~=2024.2.0",
    "boto3~=1.28.0",
    "pymysql~=1.0.2"
]
aws_postgres = [
    "s3fs~=2024.2.0",
    "boto3~=1.28.0",
    "psycopg2~=2.9.6"
]

gcp_mysql = [
    "gcsfs~=2024.2.0",
    "pymysql~=1.0.2"
]

gcp_postgres = [
    "gcsfs~=2024.2.0",
    "psycopg2~=2.9.6"
]

azure_mysql = [
    "adlfs~=2024.2.0",
    "pymysql~=1.0.2"
]

azure_postgres = [
    "adlfs~=2024.2.0",
    "psycopg2~=2.9.6"
]

s3 = ["s3fs~=2024.2.0"]
gcs = ["gcsfs~=2024.2.0"]
azure = ["adlfs~=2024.2.0"]
postgres = ["psycopg2~=2.9.6"]
mysql = ["pymysql~=1.0.2"]
onnx = [
    "onnx~=1.16.0; platform_system == 'Linux' and python_version <= '3.11'",
    "onnx==1.16.1; platform_system == 'Windows' and python_version <= '3.11'",
    "onnx~=1.16.0; platform_system == 'Darwin' and python_version <= '3.11'",
    "onnx>=1.17.0; python_version >= '3.12'",
]
onnxruntime = [
    "onnxruntime~=1.16.0; python_version <= '3.11'",
    "onnxruntime>=1.18.0; python_version >= '3.12'",
]
tf_onnx = [
    "tf2onnx~=1.16.1",
    "opsml[onnx,onnxruntime]",
]
sklearn_onnx = [
    "skl2onnx==1.16.0",
    "onnxmltools~=1.12",
    "opsml[onnx,onnxruntime]",
]
torch_onnx = [
    "opsml[onnx,onnxruntime]",
]
all = [
    "opsml[server]",
    "opsml[aws_mysql]",
    "opsml[aws_postgres]",
    "opsml[gcp_mysql]",
    "opsml[gcp_postgres]",
    "opsml[azure_mysql]",
    "opsml[azure_postgres]",
    "opsml[tf_onnx]",
    "opsml[sklearn_onnx]",
    "opsml[torch_onnx]",
]

[tool.uv]
dev-dependencies = [
    "ruff>=0.6.2",
    "pytest~=7.1.2",
    "pytest-lazy-fixture~=0.6.3",
    "pytest-cov~=3.0.0",
    "coverage[toml]~=6.5.0",
    "torch==2.2.0",
    "lightgbm>=4.0.0, <4.4.0",
    "xgboost~=1.7.1",
    "sentence-transformers~=3.0.1",
    "optimum>=1.21.4",
    "tensorflow>=2.16.0; platform_system == 'Linux'",
    "tf-keras>=2.16.0; platform_system == 'Linux'",
    "lightning>=2.4.0",
    "pytest-rerunfailures~=13.0",
    "catboost~=1.2.2",
    "vowpalwabbit~=9.10.0; platform_system == 'Linux' and python_version < '3.11'",
    "matplotlib <3.9.1; platform_system == 'Windows'",
    "types-pymysql~=1.0.19.1",
    "types-requests~=2.28.11.7",
    "black~=24.3.0",
    "mypy~=1.0",
    "types-protobuf~=4.21.0.3",
    "pylint~=2.17.5",
    "pylint-pydantic~=0.2.4",
    "types-pyyaml~=6.0.12.12",
    "isort~=5.12.0",
    "mkdocs-material~=9.5",
    "mkdocstrings[python]~=0.25.0",
    "confluent-kafka>=2.5.3",
    "transformers>=4.42.0",
    "accelerate>=1.0.1",
    "torchvision>=0.16.2",
]

[tool.uv.sources]

[tool.isort]
profile = "black"

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'

[tool.pylint.MASTER]
ignore-paths = ["opsml/.local_tests/*", "opsml/registry/sql/migration/*"]
load-plugins = ["pylint_pydantic", "pylint.extensions.docparams"]

[tool.pylint.messages_control]
max-line-length = 130
disable = [
    "multiple-statements",
    "too-few-public-methods",
    "design",
    "duplicate-code",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "too-many-nested-blocks",
    "unused-argument",
    "fixme",
    "import-outside-toplevel",
    "no-name-in-module",
    "ungrouped-imports",
    "cyclic-import", 
    "logging-too-many-args",
]
extension-pkg-whitelist = ["pydantic"]


[tool.flake8]
# This section is just a doc placeholder..see setup.cfg
max-complexity = 10
format = "pylint"
statistics = true
max-line-length = 125
# ignore non-PEP8 lints
ignore = ["E203", "W503", "W0511"]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
testpaths = ["tests"]
addopts = "--ignore=tests/test_docs"
markers = [
    "large: for testing large artifacts",
    "compat: compatibility marker",
    "appsec: application security marker"
]


[tool.mypy]
# platform configuration
python_version = "3.9"
platform = "Linux"
ignore_missing_imports = true
strict = true
disable_error_code = [
    "attr-defined",
    "assignment",
]

plugins = [
    "numpy.typing.mypy_plugin",
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]
exclude = [
    "opsml/.local_tests/*",
    "opsml/registry/sql/query_helpers.py",
    "opsml/registry/sql/migration/*",
]


[tool.coverage.paths]
source = ["opsml", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["opsml"]

[tool.coverage.report]
show_missing = true
fail_under = 80


[tool.ruff]
line-length = 130

# Enable Pyflakes `E` and `F` codes by default.
lint.select = ["E", "F"]
lint.ignore = []

# Exclude a variety of commonly ignored directories.
lint.exclude = [
    "tests/",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "opsml/registry/sql/migration/*",
]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F841", "F401", "F811"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
