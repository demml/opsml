name: Build Assets

permissions:
  pull-requests: write
  contents: write

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]

env:
  INTERPRETER: "3.12"
  RUSTFLAGS: "-C debuginfo=0"

jobs:
  build:
    name: build - ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          #- os: ubuntu-22.04
          #  target: x86_64-unknown-linux-gnu
          #  archive: tar.gz
          #  binary_name: opsml-server
          #  archive_name: opsml-server-x86_64-linux-gnu

          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            binary_name: opsml-server
            archive_name: opsml-server-aarch64-linux-gnu

          #- os: macos-latest
          #  target: aarch64-apple-darwin
          #  archive: zip
          #  binary_name: opsml-server
          #  archive_name: opsml-server-aarch64-darwin
    #
    #- os: macos-13
    #  target: x86_64-apple-darwin
    #  archive: zip
    #  binary_name: opsml-server
    #  archive_name: opsml-server-x86_64-darwin
    #
    #- os: windows-latest
    #  target: x86_64-pc-windows-msvc
    #  archive: zip
    #  binary_name: opsml-server.exe
    #  archive_name: opsml-server-x86_64-windows

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        run: |
          rustup override set stable
          rustup update
          rustup target add ${{ matrix.target }}
          rustup component add rust-src

      - uses: pnpm/action-setup@v4
        name: Build UI
        with:
          version: 10
          run_install: false

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.INTERPRETER }}

      - name: Update apt repositories (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential

      - name: Install UI dependencies
        run: |
          make install.ui.deps.prod
          make build.ui

      - name: Build Binaries
        run: |
          cargo build -p opsml-server --target ${{ matrix.target }} # TODO: change back to release

      - name: Prepare binary directory
        shell: bash
        run: |
          mkdir -p release-bin
          if [ "${{ contains(matrix.os, 'windows') }}" == "true" ]; then
            cp target/${{ matrix.target }}/debug/${{ matrix.binary_name }} release-bin/
          else
            cp target/${{ matrix.target }}/debug/${{ matrix.binary_name }} release-bin/
            chmod +x release-bin/${{ matrix.binary_name }}
          fi
          # Copy UI build for Docker builds
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ] || [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
            mkdir -p release-bin/ui
            cp -r crates/opsml_server/opsml_ui/build release-bin/ui/build || true
            cp -r crates/opsml_server/opsml_ui/node_modules release-bin/ui/node_modules || true
          fi

      - name: Create zip archive (Windows/macOS)
        if: contains(matrix.archive, 'zip')
        shell: bash
        run: |
          cd release-bin
          if [ "${{ contains(matrix.os, 'windows') }}" == "true" ]; then
            7z a -tzip ../${{ matrix.archive_name }}.zip ./*
          else
            zip -r ../${{ matrix.archive_name }}.zip ./*
          fi

      - name: Create tar.gz archive (Linux)
        if: contains(matrix.archive, 'tar.gz')
        shell: bash
        run: |
          cd release-bin
          tar -czf ../${{ matrix.archive_name }}.tar.gz ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}.${{ matrix.archive }}
          retention-days: 1

  publish-docker-images:
    if: github.event_name == 'release'
    needs: build
    name: Publish Docker images to Dockerhub
    runs-on: ubuntu-22.04
    environment: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: "ubuntu"
            tag_suffix: "ubuntu"
          - image: "alpine"
            tag_suffix: "alpine"
          - image: "scratch"
            tag_suffix: "scratch"
          - image: "debian"
            tag_suffix: "debian"
          - image: "distroless"
            tag_suffix: "distroless"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Linux binary artifact
        uses: actions/download-artifact@v4
        with:
          name: opsml-server-x86_64-linux-gnu
          path: ./artifacts

      - name: Extract binary
        run: |
          mkdir -p binary
          tar -xzf ./artifacts/opsml-server-x86_64-linux-gnu.tar.gz -C ./binary

      - name: Set up binary permissions
        run: |
          chmod +x ./binary/opsml-server

      - name: Set version tag
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/official/${{ matrix.image }}/Dockerfile
          push: true
          build-args: |
            OPSML_SERVER_BINARY=./binary/opsml-server
          tags: |
            demml/opsml:${{ matrix.tag_suffix }}-amd64-${{ steps.set-version.outputs.VERSION }}
            ${{ github.event_name == 'release' && format('demml/opsml:{0}-amd64-latest', matrix.tag_suffix) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-docker-images-arm64:
    #if: github.event_name == 'release' # TODO: change back to release only
    needs: build
    name: Publish ARM64 Docker images
    runs-on: ubuntu-22.04
    #environment: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: "ubuntu"
            tag_suffix: "ubuntu"
          - image: "alpine"
            tag_suffix: "alpine"
          - image: "debian"
            tag_suffix: "debian"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download ARM64 Linux binary artifact
        uses: actions/download-artifact@v4
        with:
          name: opsml-server-aarch64-linux-gnu
          path: ./artifacts

      - name: Extract binary
        run: |
          if [ -f "./artifacts/opsml-server-aarch64-linux-gnu.tar.gz" ]; then
            mkdir -p binary
            tar -xzf ./artifacts/opsml-server-aarch64-linux-gnu.tar.gz -C ./binary
            chmod +x ./binary/opsml-server
          else
            echo "ARM64 binary not found, skipping this build"
            exit 1
          fi
        continue-on-error: true

      - name: Debug binary directory structure
        run: |
          echo "=== Binary directory structure ==="
          find ./binary -type f -o -type d | sort
          echo "=== UI assets check ==="
          ls -la ./binary/ui/ 2>/dev/null || echo "No ui directory found"
          ls -la ./binary/ui/build/ 2>/dev/null || echo "No ui/build directory found"
          ls -la ./binary/ui/node_modules/ 2>/dev/null || echo "No ui/node_modules directory found"
          echo "=== Total files in binary directory ==="
          find ./binary -type f | wc -l

      - name: Set version tag
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=dev" >> $GITHUB_OUTPUT # TODO: change back to latest
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/official/${{ matrix.image }}/Dockerfile
          push: true
          platforms: linux/arm64
          build-args: |
            OPSML_SERVER_BINARY=./binary
          tags: |
            demml/opsml:${{ matrix.tag_suffix }}-arm64-${{ steps.set-version.outputs.VERSION }}
            ${{ github.event_name == 'release' && format('demml/opsml:{0}-arm64-latest', matrix.tag_suffix) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-binary-assets:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List artifacts
        run: |
          ls -lhR dist
          echo "`find dist -type f | wc -l` files"

      - name: Upload files to GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in $(find dist -type f -not -path "*/\.*"); do
            echo "Uploading $file to release"
            gh release upload ${{ github.event.release.tag_name }} "$file" --clobber
          done
