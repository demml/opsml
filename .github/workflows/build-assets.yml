name: Build Assets

permissions:
  pull-requests: write
  contents: write

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]

env:
  INTERPRETER: "3.12"
  RUSTFLAGS: "-C debuginfo=0"

jobs:
  build:
    name: build - ${{ matrix.target }} - ${{ matrix.tag }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04 #
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            binary_name: opsml-server
            archive_name: opsml-server-x86_64-linux-gnu
            container_image: null
            tag: ubuntu

          # rocky-specific builds to account for glibc and perl differences
          - os: ubuntu-22.04 #
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            binary_name: opsml-server
            archive_name: opsml-server-x86_64-linux-gnu-rocky
            container_image: rockylinux:9
            tag: rocky

          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            binary_name: opsml-server
            archive_name: opsml-server-aarch64-linux-gnu
            container_image: null
            tag: ubuntu

          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            binary_name: opsml-server
            archive_name: opsml-server-aarch64-linux-gnu-rocky
            container_image: rockylinux:9
            tag: rocky

          - os: macos-13
            target: x86_64-apple-darwin
            archive: zip
            binary_name: opsml-server
            archive_name: opsml-server-x86_64-darwin
            container_image: null
            tag: macos

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
            binary_name: opsml-server.exe
            archive_name: opsml-server-x86_64-windows
            container_image: null
            tag: windows

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container_image != null && matrix.container_image || null }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rocky Deps Arm
        if: matrix.container_image == 'rockylinux:9' && contains(matrix.os, 'ubuntu-22.04-arm')
        run: |
          dnf install -y --allowerasing gcc make curl pkgconf openssl-devel wget perl pkg-config

          # Install Rust via rustup
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

          # Add Rust to PATH for subsequent steps
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

          # Source for this step
          source $HOME/.cargo/env

          echo "Installing CMake 3.26.4..."
          curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-aarch64.sh -o cmake.sh
          chmod +x cmake.sh
          ./cmake.sh --skip-license --prefix=/usr/local
          cmake --version

          # Install Node.js 22
          curl -fsSL https://rpm.nodesource.com/setup_22.x | bash -
          dnf install -y nodejs

          # Install pnpm
          npm install -g pnpm@10

      - name: Install Rocky Deps
        if: matrix.container_image == 'rockylinux:9' && !contains(matrix.os, 'ubuntu-22.04-arm')
        run: |
          dnf install -y --allowerasing gcc make curl pkgconf openssl-devel wget perl pkg-config

          # Install Rust via rustup
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

          # Add Rust to PATH for subsequent steps
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

          # Source for this step
          source $HOME/.cargo/env

          echo "Installing CMake 3.26.4..."
          curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh -o cmake.sh
          chmod +x cmake.sh
          ./cmake.sh --skip-license --prefix=/usr/local
          cmake --version

          # Install Node.js 22
          curl -fsSL https://rpm.nodesource.com/setup_22.x | bash -
          dnf install -y nodejs

          # Install pnpm
          npm install -g pnpm@10

      - name: Update apt repositories (Linux)
        if: contains(matrix.os, 'ubuntu') && matrix.container_image == null
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential

      - name: Set up Rust
        run: |
          rustup override set stable
          rustup update
          rustup target add ${{ matrix.target }}
          rustup component add rust-src

      - name: Set up Python
        if: matrix.container_image == null
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.INTERPRETER }}

      - uses: pnpm/action-setup@v4
        name: Setup pnpm (Ubuntu)
        if: matrix.container_image == null
        with:
          version: 10
          run_install: false

      - name: Install UI dependencies
        run: |
          # install all deps and build UI
          make build.ui

          # remove node_modules and rebuild prod version to reduce size
          make install.ui.deps.prod

      - name: Build Binaries
        run: |
          cargo build -p opsml-server --release --target ${{ matrix.target }}

      - name: Prepare binary directory
        shell: bash
        run: |
          mkdir -p release-bin
          if [ "${{ contains(matrix.os, 'windows') }}" == "true" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release-bin/
          else
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release-bin/
            chmod +x release-bin/${{ matrix.binary_name }}
          fi
          # Copy UI build for Docker builds
          if [ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ] || [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
            mkdir -p release-bin/ui
            cp -r crates/opsml_server/opsml_ui/build release-bin/ui/build || true
            cp -r crates/opsml_server/opsml_ui/node_modules release-bin/ui/node_modules || true
          fi

      - name: Create zip archive (Windows/macOS)
        if: contains(matrix.archive, 'zip')
        shell: bash
        run: |
          cd release-bin
          if [ "${{ contains(matrix.os, 'windows') }}" == "true" ]; then
            7z a -tzip ../${{ matrix.archive_name }}.zip ./*
          else
            zip -r ../${{ matrix.archive_name }}.zip ./*
          fi

      - name: Create tar.gz archive (Linux)
        if: contains(matrix.archive, 'tar.gz')
        shell: bash
        run: |
          cd release-bin
          tar -czf ../${{ matrix.archive_name }}.tar.gz ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}.${{ matrix.archive }}
          retention-days: 1

      - name: Package UI for Node.js distribution
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        shell: bash
        run: |
          mkdir -p packaged-ui
          cp -r crates/opsml_server/opsml_ui/build packaged-ui/build
          cp -r crates/opsml_server/opsml_ui/node_modules packaged-ui/node_modules
          cp crates/opsml_server/opsml_ui/package.json packaged-ui/
          cp crates/opsml_server/opsml_ui/pnpm-lock.yaml packaged-ui/ || true
          cd packaged-ui
          zip -r ../opsml-ui-node.zip ./*

      # only want to run this once, so only on the first matrix item
      # The artifact will be the same on all builds regardless of target
      - name: Upload UI Node.js package artifact
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@v4
        with:
          name: opsml-ui-node
          path: opsml-ui-node.zip
          retention-days: 1

  publish-docker-images:
    if: github.event_name == 'release'
    needs: build
    name: Publish Docker images to Dockerhub
    runs-on: ubuntu-22.04
    environment: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: "ubuntu"
            tag_suffix: "ubuntu"
            artifact: "opsml-server-x86_64-linux-gnu"
          - image: "debian"
            tag_suffix: "debian"
            artifact: "opsml-server-x86_64-linux-gnu"
          - image: "rocky"
            tag_suffix: "rocky-minimal"
            artifact: "opsml-server-x86_64-linux-gnu-rocky"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download Linux binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./artifacts

      - name: Extract binary
        run: |
          archive="./artifacts/${{ matrix.artifact }}.tar.gz"
          if [ -f "$archive" ]; then
            mkdir -p binary
            tar -xzf "$archive" -C ./binary
            chmod +x ./binary/opsml-server
          else
            echo "x86_64 binary $archive not found, skipping this build"
            exit 1
          fi

      - name: Set version tag
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/official/${{ matrix.image }}/Dockerfile
          push: true
          build-args: |
            OPSML_SERVER_BINARY=./binary
          tags: |
            demml/opsml:${{ matrix.tag_suffix }}-amd64-${{ steps.set-version.outputs.VERSION }}
            ${{ github.event_name == 'release' && format('demml/opsml:{0}-amd64-latest', matrix.tag_suffix) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-docker-images-arm64:
    if: github.event_name == 'release'
    needs: build
    name: Publish ARM64 Docker images
    runs-on: ubuntu-22.04
    environment: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: "ubuntu"
            tag_suffix: "ubuntu"
            artifact: "opsml-server-aarch64-linux-gnu"
          - image: "debian"
            tag_suffix: "debian"
            artifact: "opsml-server-aarch64-linux-gnu"
          - image: "rocky"
            tag_suffix: "rocky-minimal"
            artifact: "opsml-server-aarch64-linux-gnu-rocky"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download ARM64 Linux binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./artifacts

      - name: Extract binary
        run: |
          archive="./artifacts/${{ matrix.artifact }}.tar.gz"
          if [ -f "$archive" ]; then
            mkdir -p binary
            tar -xzf "$archive" -C ./binary
            chmod +x ./binary/opsml-server
          else
            echo "ARM64 binary $archive not found, skipping this build"
            exit 1
          fi

      - name: Set version tag
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ARM64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/official/${{ matrix.image }}/Dockerfile
          push: true
          platforms: linux/arm64
          build-args: |
            OPSML_SERVER_BINARY=./binary
          tags: |
            demml/opsml:${{ matrix.tag_suffix }}-arm64-${{ steps.set-version.outputs.VERSION }}
            ${{ github.event_name == 'release' && format('demml/opsml:{0}-arm64-latest', matrix.tag_suffix) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-binary-assets:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List artifacts
        run: |
          ls -lhR dist
          echo "`find dist -type f | wc -l` files"

      - name: Upload files to GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in $(find dist -type f -not -path "*/\.*"); do
            echo "Uploading $file to release"
            gh release upload ${{ github.event.release.tag_name }} "$file" --clobber
          done
