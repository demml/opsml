name: Publish Opsml

on:
  push:
    branches:
      - main
  release:
    types: [published]

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.9"
  PYTHON_VERSION_WIN_ARM64: "3.11"
  INTERPRETER: "3.10 3.11 3.12 3.13 pypy3.9 pypy3.10"
  RUSTFLAGS: -C debuginfo=0
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always

jobs:
  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          maturin-version: 1.8.3
          rust-toolchain: stable
          working-directory: ./py-opsml

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: pypi_sdist
          path: ./py-opsml/dist
          retention-days: 1

  build-ubuntu:
    name: build - ubuntu - ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            manylinux: auto
          - target: aarch64-unknown-linux-gnu
            manylinux: "2_28"

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: pip install -U twine

      - name: Set OPENSSL_DIR environment variable
        run: echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --features server
          rust-toolchain: stable
          docker-options: -e CI
          working-directory: ./py-opsml

          # See: https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi

            # Install bindgen CLI
            cargo install --force --locked bindgen-cli

            # Determine architecture (x86_64 or x86)
            ARCH=$(uname -m)

            echo "Detected architecture: $ARCH"

            # Download the correct CMake version based on the architecture
            if [[ "$ARCH" == "x86_64" ]]; then
                echo "Downloading CMake for x86_64 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh -o cmake.sh
                chmod +x cmake.sh
                ./cmake.sh --skip-license --prefix=/usr/local
            elif [[ "$ARCH" == "i686" ]]; then
                echo "Downloading CMake for x86 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4.tar.gz -o cmake.tar.gz
                tar -xzf cmake.tar.gz
                cd cmake-3.26.4
                ./bootstrap --prefix=/usr/local
                make -j$(nproc)
                make install
                cd ..
            else
                echo "Unsupported architecture: $ARCH"
                exit 1
            fi

            cmake --version

      - name: Check dist
        working-directory: ./py-opsml
        run: ls -lh dist/

      - name: Check wheel
        working-directory: ./py-opsml
        run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_ubuntu_${{ matrix.target }}
          path: ./py-opsml/dist
          retention-days: 1

  build-macos:
    name: build - macos - (${{ matrix.target }} - auto
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            architecture: x86-64
            target: x86_64-apple-darwin
          - os: macos-15
            architecture: aarch64
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: pip install -U twine

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter ${{ env.INTERPRETER }} --features server
          rust-toolchain: stable
          docker-options: -e CI
          working-directory: ./py-opsml

      - name: Check dist
        working-directory: ./py-opsml
        run: ls -lh dist/

      - name: Check wheel
        working-directory: ./py-opsml
        run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_macos_${{ matrix.target }}
          path: ./py-opsml/dist
          retention-days: 1

  build-windows:
    name: build - windows - ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            architecture: x86-64
            target: x86_64-pc-windows-msvc
          #- os: windows-11-arm
          # architecture: aarch64
          #target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.os != 'windows-11-arm'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Python (ARM64 Windows)
        if: matrix.os == 'windows-11-arm'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_WIN_ARM64 }}

      - run: pip install -U twine

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          target: ${{ matrix.target }}
          args: --release --out dist
          rust-toolchain: stable
          working-directory: ./py-opsml

      - name: Check dist
        working-directory: ./py-opsml
        run: dir dist/

      - name: Check wheel
        working-directory: ./py-opsml
        run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_windows_${{ matrix.target }}
          path: ./py-opsml/dist
          retention-days: 1

  inspect-pypi-assets:
    needs: [build-ubuntu, build-macos, build-windows, build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: list dist files
        run: |
          ls -lh dist/
          ls -l dist/
          echo "`ls dist | wc -l` files"

  test-builds-os:
    name: test build on ${{ matrix.os }}
    needs: [build-ubuntu, build-macos, build-windows, build-sdist]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Create virtual environment
        working-directory: ./py-opsml
        run: |
          python -m venv .venv
          echo "$GITHUB_WORKSPACE/opsml/.venv/bin" >> $GITHUB_PATH

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_${{ matrix.os }}_*
          merge-multiple: true
          path: py-opsml/dist

      - name: install opsml
        working-directory: ./py-opsml
        run: |
          python3 -m pip install opsml --no-deps --no-index --force-reinstall --find-links dist

  python-release:
    if: github.event_name == 'release'
    name: Release-Python
    runs-on: ubuntu-latest
    needs: [test-builds-os]
    environment: release
    steps:
      - uses: actions/checkout@v4
      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Check version
        working-directory: ./py-opsml
        run: |
          export VERSION=$(cargo pkgid | cut -d "#" -f2)
          echo "version: $VERSION"
          echo "tag: $GITHUB_REF_NAME"
          test "v$VERSION" "=" "$GITHUB_REF_NAME"
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: pip install -U twine
      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist
      - run: twine check --strict dist/*
      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
