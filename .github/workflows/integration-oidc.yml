# Sample workflow to access AWS resources when workflow is tied to branch
# The workflow Creates static website using aws s3
name: AWS example workflow
on: push

# permission can be added at job level or workflow level

jobs:
  S3PackageUpload:
    permissions:
      id-token: write
      contents: read
    env:
      BUCKET_NAME: "${{ secrets.AWS_S3_BUCKET }}"
      AWS_REGION: "${{ secrets.AWS_REGION }}"
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      # Upload a file to AWS s3
      - name: Copy index.html to s3
        run: |
          aws s3 cp ./LICENSE.md s3://${{ env.BUCKET_NAME }}/

  AZURE-Integration:
    strategy:
      matrix:
        python-version: ["3.11"]
        poetry-version: ["1.7.1"]
        os: [ubuntu]
    runs-on: ubuntu-latest
    env:
      OPSML_TESTING: 1
      LOG_LEVEL: DEBUG
      OPSML_STORAGE_URI: az://${{ secrets.AZURE_CONTAINER_NAME }}
      AZURE_CONTAINER_NAME: ${{ secrets.AZURE_CONTAINER_NAME }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_TENANT_ID: ${{ secrets.AZURE_STORAGE_TENANT_ID }}
      AZURE_STORAGE_CLIENT_ID: ${{ secrets.AZURE_STORAGE_CLIENT_ID }}
      AZURE_STORAGE_CLIENT_SECRET: ${{ secrets.AZURE_STORAGE_CLIENT_SECRET }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install poetry
        run: pipx install poetry==${{ matrix.poetry-version }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - run: make setup.project
      - run: make test.integration.azure

  GCS-Integration:
    runs-on: ubuntu-latest
    env:
      OPSML_TESTING: 1
      LOG_LEVEL: DEBUG
      OPSML_GCS_BUCKET: ${{ secrets.OPSML_GCS_BUCKET }}
      #GOOGLE_ACCOUNT_JSON_BASE64: ${{ secrets.GCS_ACCOUNT_BASE64 }}
      OPSML_STORAGE_URI: gs://${{ secrets.OPSML_GCS_BUCKET }}
    strategy:
      matrix:
        python-version: ["3.11"]
        poetry-version: ["1.7.1"]
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Authenticate with Google Cloud"
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          create_credentials_file: true
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install poetry
        run: pipx install poetry==${{ matrix.poetry-version }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
      - run: |
          export GOOGLE_ACCOUNT_JSON_BASE64="$(${{steps.auth.outputs.credentials_file_path}} | base64 -w 0)"
          make setup.project
          make test.integration.gcp
