name: OpsML Unit Tests
permissions:
  contents: read

on:
  push:
    branches:
      - main
      - master
  pull_request:

env:
  PYTHON_VERSION: "3.12"
  RUSTFLAGS: -C debuginfo=0
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always

jobs:
  format-and-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: |
          rustup override set stable && rustup update
          rustup component add clippy
          rustup component add rustfmt

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Print versions
        run: rustc --version && cargo --version && cargo clippy --version && rustup --version

      - name: Run format
        run: make format

      - name: Run lints
        run: make lints

  test-Sql-Storage-Utils:
    runs-on: ubuntu-22.04
    needs: format-and-lint
    steps:
      - uses: actions/checkout@v4

      - name: "Create env file"
        run: |
          touch .env
          echo POSTGRES_DB=postgres >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_PASSWORD=postgres >> .env
          echo MYSQL_DATABASE=mysql >> .env
          echo MYSQL_USER=admin >> .env
          echo MYSQL_PASSWORD=admin >> .env
          echo KEYCLOAK_ADMIN=admin >> .env
          echo KEYCLOAK_ADMIN_PASSWORD=admin >> .env
          cat .env

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Run Unit Tests
        run: make test.unit

  test-py-build-linux:
    name: build - ${{ matrix.runner-type }} - ${{ matrix.manylinux }} - ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            manylinux: auto
            runner-type: ubuntu-latest
            runner: ubuntu-latest
            docker-options: "-e CI"
          - target: aarch64-unknown-linux-gnu
            manylinux: "2_28"
            runner-type: ubuntu-24.04-arm
            runner: ubuntu-24.04-arm
            docker-options: "-e CI -e SIMSIMD_DISABLE_SVE=1 -e SIMSIMD_TARGET_SVE=0 -e SIMSIMD_TARGET_SVE2=0"

    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: pip install -U twine

      - name: Set OPENSSL_DIR environment variable
        run: echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV

      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist
          rust-toolchain: stable
          docker-options: ${{ matrix.docker-options }}
          working-directory: ./py-opsml
          before-script-linux: |
            # Install required packages
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi

            # Install bindgen CLI
            cargo install --force --locked bindgen-cli

            # Determine architecture and install CMake
            ARCH=$(uname -m)
            echo "Detected architecture: $ARCH"

            if [[ "$ARCH" == "x86_64" ]]; then
                echo "Downloading CMake for x86_64 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh -o cmake.sh
                chmod +x cmake.sh
                ./cmake.sh --skip-license --prefix=/usr/local
            elif [[ "$ARCH" == "aarch64" ]]; then
                echo "Downloading CMake for aarch64 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-aarch64.sh -o cmake.sh
                chmod +x cmake.sh
                ./cmake.sh --skip-license --prefix=/usr/local
            elif [[ "$ARCH" == "i686" ]]; then
                echo "Downloading CMake for x86 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4.tar.gz -o cmake.tar.gz
                tar -xzf cmake.tar.gz
                cd cmake-3.26.4
                ./bootstrap --prefix=/usr/local
                make -j$(nproc)
                make install
                cd ..
            else
                echo "Unsupported architecture: $ARCH"
                exit 1
            fi

            cmake --version

            # Set ARM64-specific environment variables for simsimd
            if [[ "$ARCH" == "aarch64" ]]; then
                echo "Setting up ARM64 build environment"
                export SIMSIMD_DISABLE_SVE=1
                export SIMSIMD_TARGET_SVE=0
                export SIMSIMD_TARGET_SVE2=0
                export SIMSIMD_TARGET_SVE_F16=0
                export SIMSIMD_TARGET_SVE_BF16=0
                export SIMSIMD_TARGET_SVE_I8=0
                export CFLAGS="-march=armv8-a"
                export CXXFLAGS="-march=armv8-a"
            fi

      - name: Check dist
        working-directory: ./py-opsml
        run: ls -lh dist/

      - name: Check wheel
        working-directory: ./py-opsml
        run: twine check --strict dist/*

  test-python:
    name: test ${{ matrix.os }}-${{ matrix.python-version }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # ubuntu tests
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"

          # macos tests
          - os: macos-15
            python-version: "3.10"
          - os: macos-15
            python-version: "3.11"
          - os: macos-15
            python-version: "3.12"

          # windows tests
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"
          - os: windows-latest
            python-version: "3.12"

    runs-on: ${{ matrix.os }}
    needs: [format-and-lint]
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Install libomp on macOS
        if: runner.os == 'macOS'
        run: brew install libomp

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.python-version }}-v1

      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}

      - name: Create virtual environment
        working-directory: ./py-opsml
        run: make setup.project

      - name: Lints
        working-directory: ./py-opsml
        run: make lints.ci

      - name: Run tests and report coverage
        working-directory: ./py-opsml
        run: |
          make test.unit

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # if 3.12 and ubuntu, run tensorflow tests
      - name: Run TensorFlow tests
        if: ${{ runner.os == 'Linux' && matrix.python-version == '3.12' }}
        working-directory: ./py-opsml
        run: make test.unit.tensorflow

      - name: Run service tests
        if: ${{ runner.os == 'Linux' && matrix.python-version == '3.12' }}
        working-directory: ./py-opsml
        run: |
          make test.service

  # this will run local client and server storage tests.
  # Intergration tests will be run when prs are merged to main
  test-server:
    runs-on: ubuntu-latest
    needs: format-and-lint
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install UI dependencies
        run: make install.ui.deps

      - name: Setup Server
        run: make start.server.background

      - name: Run storage client tests
        run: make test.storage.client

      - name: Shutdown Server
        run: make stop.server
