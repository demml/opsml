name: OpsML Unit Tests
permissions:
  contents: read

on:
  push:
    branches:
      - main
      - master
  pull_request:

env:
  RUSTFLAGS: -C debuginfo=0

jobs:
  format-and-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      # print versions (rustup, cargo, clippy)
      - name: Print versions
        run: rustc --version && cargo --version && cargo clippy --version && rustup --version

      - name: Run format
        run: make format

      - name: Run lints
        run: make lints

  test-Sql-Storage-Utils:
    runs-on: ubuntu-22.04
    needs: format-and-lint
    steps:
      - uses: actions/checkout@v4

      - name: "Create env file"
        run: |
          touch .env
          echo POSTGRES_DB=postgres >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_PASSWORD=postgres >> .env
          echo MYSQL_DATABASE=mysql >> .env
          echo MYSQL_USER=admin >> .env
          echo MYSQL_PASSWORD=admin >> .env
          echo KEYCLOAK_ADMIN=admin >> .env
          echo KEYCLOAK_ADMIN_PASSWORD=admin >> .env
          cat .env

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Run Unit Tests
        run: make test.unit

  # build ubuntu, macos and windows binaries to use in tests
  build-wheels:
    name: build wheels - ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            manylinux: auto
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-15
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Install libomp on macOS
        if: runner.os == 'macOS'
        run: brew install libomp

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Build abi3 wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --out dist --features server
          rust-toolchain: stable
          working-directory: ./py-opsml

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.target }}
          path: ./py-opsml/dist/*.whl
          retention-days: 1

  test-python:
    name: test ${{ matrix.os }}-${{ matrix.python-version }}
    needs: [format-and-lint, build-wheels]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
            wheel-os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.11"
            wheel-os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.12"
            wheel-os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-14
            python-version: "3.10"
            wheel-os: macos-15
            target: aarch64-apple-darwin
          - os: macos-14
            python-version: "3.11"
            wheel-os: macos-15
            target: aarch64-apple-darwin
          - os: macos-15
            python-version: "3.12"
            wheel-os: macos-15
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Install libomp on macOS
        if: runner.os == 'macOS'
        run: brew install libomp

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel-${{ matrix.wheel-os }}-${{ matrix.target }}
          path: ./py-opsml/dist

      - name: Create virtual environment and install wheel
        working-directory: ./py-opsml
        run: |
          uv sync --all-extras --group dev --group docs
          uv pip install opsml --no-deps --no-index --force-reinstall --find-links dist

      - name: Lints
        working-directory: ./py-opsml
        run: make lints.ci

      - name: Run tests and report coverage
        working-directory: ./py-opsml
        run: make test.unit

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
