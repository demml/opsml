name: OpsML Unit Tests
permissions:
  contents: read

on:
  push:
    branches:
      - main
      - master
  pull_request:

env:
  PYTHON_VERSION: "3.9"
  RUSTFLAGS: -C debuginfo=0
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always

jobs:
  format-and-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      # print versions (rustup, cargo, clippy)
      - name: Print versions
        run: rustc --version && cargo --version && cargo clippy --version && rustup --version

      - name: Run format
        run: make format

      - name: Run lints
        run: make lints

  test-Sql-Storage-Utils:
    runs-on: ubuntu-22.04
    needs: format-and-lint
    steps:
      - uses: actions/checkout@v4

      - name: "Create env file"
        run: |
          touch .env
          echo POSTGRES_DB=postgres >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_PASSWORD=postgres >> .env
          echo MYSQL_DATABASE=mysql >> .env
          echo MYSQL_USER=admin >> .env
          echo MYSQL_PASSWORD=admin >> .env
          echo KEYCLOAK_ADMIN=admin >> .env
          echo KEYCLOAK_ADMIN_PASSWORD=admin >> .env
          cat .env

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Run Unit Tests
        run: make test.unit

  # build ubuntu, macos and windows binaries to use in tests
  build-wheels:
    name: build wheels - ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            manylinux: auto
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-15
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Build abi3 wheel (macos and windows)
        if: runner.os == 'macOS' || runner.os == 'Windows'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --out dist --features server
          rust-toolchain: stable
          docker-options: -e CI
          working-directory: ./py-opsml

      - name: Build abi3 wheel (linux)
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --out dist --features server
          rust-toolchain: stable
          docker-options: -e CI
          working-directory: ./py-opsml
          # See: https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145
          before-script-linux: |
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                apt update -y && apt-get install -y libssl-dev openssl pkg-config
            fi

            # Install bindgen CLI
            cargo install --force --locked bindgen-cli

            # Determine architecture (x86_64 or x86)
            ARCH=$(uname -m)

            echo "Detected architecture: $ARCH"

            # Download the correct CMake version based on the architecture
            if [[ "$ARCH" == "x86_64" ]]; then
                echo "Downloading CMake for x86_64 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh -o cmake.sh
                chmod +x cmake.sh
                ./cmake.sh --skip-license --prefix=/usr/local
            elif [[ "$ARCH" == "i686" ]]; then
                echo "Downloading CMake for x86 architecture"
                curl -L https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4.tar.gz -o cmake.tar.gz
                tar -xzf cmake.tar.gz
                cd cmake-3.26.4
                ./bootstrap --prefix=/usr/local
                make -j$(nproc)
                make install
                cd ..
            else
                echo "Unsupported architecture: $ARCH"
                exit 1
            fi

            cmake --version

      - name: Check dist
        # only run for macOS and Windows
        if: runner.os == 'macOS' || runner.os == 'Linux'
        working-directory: ./py-opsml
        run: ls -lh dist/

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}-${{ matrix.target }}
          path: ./py-opsml/dist/*.whl
          retention-days: 1

  test-python:
    name: test ${{ matrix.os }}-${{ matrix.python-version }}
    needs: [format-and-lint, build-wheels]

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: "3.10"
            wheel-os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.11"
            wheel-os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            python-version: "3.12"
            wheel-os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-14
            python-version: "3.10"
            wheel-os: macos-15
            target: aarch64-apple-darwin
          - os: macos-14
            python-version: "3.11"
            wheel-os: macos-15
            target: aarch64-apple-darwin
          - os: macos-15
            python-version: "3.12"
            wheel-os: macos-15
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Install libomp on macOS
        if: runner.os == 'macOS'
        run: brew install libomp

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel-${{ matrix.wheel-os }}-${{ matrix.target }}
          path: ./py-opsml/dist

      - name: Debug wheel contents
        working-directory: ./py-opsml
        run: |
          echo "Downloaded wheel artifacts:"
          ls -la dist/
          echo "Wheel details:"
          file dist/*.whl || echo "No .whl files found"

      - name: Create virtual environment and install dependencies
        working-directory: ./py-opsml
        run: |
          uv sync --all-extras --group dev --group docs

      - name: Install server-enabled wheel directly
        working-directory: ./py-opsml
        run: |
          # Remove any existing opsml installation
          uv pip uninstall opsml -y || true

          # Install the wheel directly by path
          WHEEL_FILE=$(ls dist/opsml-*.whl | head -1)
          if [ -z "$WHEEL_FILE" ]; then
            echo "❌ No wheel file found in dist/"
            exit 1
          fi

          echo "Installing wheel: $WHEEL_FILE"
          uv pip install --force-reinstall --verbose "$WHEEL_FILE"

      - name: Verify server features are available
        working-directory: ./py-opsml
        run: |
          uv run python -c "
          import opsml
          import sys

          print(f'OpsML version: {opsml.__version__}')
          print('Testing server feature availability...')

          try:
              # Test actual server functionality that requires server features
              from opsml.registry import CardRegistry
              registry = CardRegistry('data')
              print('✅ CardRegistry creation successful - server features working')
          except RuntimeError as e:
              if 'server feature not enabled' in str(e):
                  print(f'❌ Server feature runtime error: {e}')
                  sys.exit(1)
              else:
                  print(f'⚠️  Other runtime error (may be expected): {e}')
          except Exception as e:
              print(f'⚠️  Unexpected error during registry creation: {e}')

          print('✅ Server feature verification completed')
          "

      - name: Lints
        working-directory: ./py-opsml
        run: make lints.ci

      - name: Run tests and report coverage
        working-directory: ./py-opsml
        run: make test.unit

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
