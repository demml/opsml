name: OpsML Unit Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:

env:
  RUSTFLAGS: -C debuginfo=0

jobs:
  format-and-lint:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      # print versions (rustup, cargo, clippy)
      - name: Print versions
        run: rustc --version && cargo --version && cargo clippy --version && rustup --version

      - name: Run format
        run: make format

      - name: Run lints
        run: make lints

  test-Sql-Storage-Utils:
    runs-on: ubuntu-22.04
    needs: format-and-lint
    steps:
      - uses: actions/checkout@v4

      - name: "Create env file"
        run: |
          touch .env
          echo POSTGRES_DB=postgres >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_PASSWORD=postgres >> .env
          echo MYSQL_DATABASE=mysql >> .env
          echo MYSQL_USER=admin >> .env
          echo MYSQL_PASSWORD=admin >> .env
          echo KEYCLOAK_ADMIN=admin >> .env
          echo KEYCLOAK_ADMIN_PASSWORD=admin >> .env
          cat .env

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Run Unit Tests
        run: make test.unit

  # this will run local client and server storage tests.
  # Intergration tests will be run when prs are merged to main
  test-server:
    runs-on: ubuntu-22.04
    needs: format-and-lint
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install UI dependencies
        run: make install.ui.deps

      - name: Setup Server
        run: make start.server

      - name: Run storage client tests
        run: make test.storage.client

      - name: Shutdown Server
        run: make stop.server

  test-python:
    name: test ${{ matrix.os }}-${{ matrix.python-version }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
        python-version: ["3.10", "3.11", "3.12"]

    runs-on: ${{ matrix.os }}-latest
    needs: [format-and-lint]
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Install libomp on macOS
        if: matrix.os == 'macos'
        run: brew install libomp

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.python-version }}-v1

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create virtual environment
        working-directory: ./py-opsml
        run: make setup.project

      - name: Lints
        working-directory: ./py-opsml
        run: make lints.ci

      - name: Run tests and report coverage
        working-directory: ./py-opsml
        run: |
          make test.unit

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # if 3.12 and ubuntu, run tensorflow tests
      - name: Run TensorFlow tests
        if: ${{ matrix.os == 'ubuntu' && matrix.python-version == '3.12' }}
        working-directory: ./py-opsml
        run: make test.unit.tensorflow

  test-python-windows:
    name: test ${{ matrix.os }}-${{ matrix.python-version }}

    strategy:
      fail-fast: false
      matrix:
        os: [windows]
        python-version: ["3.10", "3.11", "3.12"]

    runs-on: ${{ matrix.os }}-latest
    needs: [format-and-lint]
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.python-version }}-v1

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create virtual environment
        working-directory: ./py-opsml
        run: make setup.project

      - name: Run tests and report coverage
        working-directory: ./py-opsml
        run: make test.unit

  # need to run as a separate job to prevent port errors from conflicting jobs
  test-service:
    name: test service
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        python-version: ["3.12"]

    runs-on: ${{ matrix.os }}-latest
    needs: [format-and-lint]
    steps:
      - uses: actions/checkout@v4

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: "3.x"

      - name: Install libomp on macOS
        if: matrix.os == 'macos'
        run: brew install libomp

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.python-version }}-v1

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create virtual environment
        working-directory: ./py-opsml
        run: make setup.project

      - name: Run service tests
        working-directory: ./py-opsml
        run: |
          make test.service
